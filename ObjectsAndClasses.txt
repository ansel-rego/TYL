Suppose that we want to select Indian Cricket team for World Cup.
We start with a plan such as let us select 5 batters, 2 all-rounders and 4 bowlers.
But when ICC asks for the team, we cannot say that there will be 5 batters, 2 all-rounders and 4 bowlers.
Because batter, all-rounder, bowlers - thesr are just the ideas or concepts.
But they are not real people.
But Rohit Sharma is a real person.
Virat Kholi is a real person.
When ICC asks for the team, we have to name Rohit Sharma, Virat Kholi, etc....
Similarly, Bumra is an object belonging to the class of bowlers.
A Class is a idea or a concept or a blueprint to create objects.
But we cannot operate with Classes alone.
We have to create objects of that class and operate with them.
For a player to be called as an all-rounder, he must have certain properties and he must be able to do certain tasks.
Creating a Class helps us in bundling properties and functionalities together.
For Ex., when we excecute the following line of code, we create an object of type list.
list1=[]
Here list1 is an object belonging to the class of list.
Similarly, the following line of code creates an object of type string.
str1="raveesh"
When we know that an object belongs to a particular class, we know how that object behaves in a program.
We can have many players belonging to the class of bowlers.
Similarly, we can have many objects belonging to a particular class.
The variables belonging to a particular class are called as 'Attributes'.
Attributes define the properties of the object.
For Ex., Virat Kholi ia an object belonging to the class of batters and right handed batting is his attribute.
The functions belonging to a particular class are called 'Methods'.
Methods tell us what all operations we can perform on the objects of that particular class.
For Ex., if list1 is an object of type list, append() is a method we can call to append an element to the list as follows.
list1.append()
Similarly, we have a method(function) 'count()' that can count the number of occurance of an element in the list as follows
list1.count(i)
Similarly, we have another method(function) 'index()' that can return the index of an element in the list as follows.
list1.index(i)
All Classes have a function called __init__(), which is always excecuted when the class is being initiated.
The __init__() function assigns values to object properties, or other operations that are necessary to do when the object is being created.
The __init__() function is called automatically when an object of that class is created.
The 'self' parameter is a reference to the current object.
It is used to access the variables that belonh to the class.
Class definitions cannot be empty.
But, for some reason, if you want to create a class with no content use 'pass' statement to avoid getting an error.
For Ex.,
class batter:
    pass

EXAMPLES OF A class:
class Person:
    def __init__(self,fname,lname):
        self.firstname=fname
        self.lastname=lname
    def printname(self):
        print(self.firstname,self.lastname)

Here, 'Person' is the name if the class.
'firstname' and 'lastname' are the attributes(variables) of the class.
'printname()' is the method(function) of the class.

x=Person("Raveesh","Hegde")
Here, 'x' is an object belonging to the class 'Person'.

x.printname()
This will print - Raveesh Hegde

4 PILLARS or the 4 FUNDAMENTAL CONCEPTS OF OBJECT ORIENTED PROGRAMMING:
    1.INHERITANCE:
    Inheritance allows us to define a class that inherits all of the methods and properties from another class.
    Parent class is the class being inherited from, also called base class.
    Child class is a class that inherits from another class, also called derived class.
    To create a class that inherits the functionality from another class, send the Parent class as a parameter when Creating the child class:
    For Ex., To create a class named 'Student'


    2.POLYMORPHISM:



    3.ABSTRACTION:




    4.ENCAPSULATION:
    ENCAPSULATION refers to the bundling of data and methods(functions) that operate 

